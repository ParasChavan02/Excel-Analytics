{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paras\\\\OneDrive\\\\Desktop\\\\Excel-Sheet-Analyzer\\\\Excel-Visualizer\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('authToken');\n      const savedUser = localStorage.getItem('user');\n      if (token && savedUser) {\n        setUser(JSON.parse(savedUser));\n        setIsAuthenticated(true);\n\n        // Verify token is still valid\n        try {\n          const currentUser = await authAPI.getCurrentUser();\n          setUser(currentUser);\n        } catch (error) {\n          // Token is invalid, clear auth\n          logout();\n        }\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      console.log('AuthContext: Starting login with:', {\n        email: credentials.email\n      });\n      setLoading(true);\n\n      // Validate input\n      if (!credentials.email || !credentials.password) {\n        throw new Error('Email and password are required');\n      }\n\n      // Attempt login\n      const response = await authAPI.login(credentials);\n      console.log('AuthContext: Raw API response:', response);\n      const {\n        token,\n        user\n      } = response;\n      if (!token || !user) {\n        console.error('AuthContext: Invalid response format:', response);\n        throw new Error('Invalid server response');\n      }\n\n      // Store auth data\n      console.log('AuthContext: Setting user and auth state');\n      setUser(user);\n      setIsAuthenticated(true);\n\n      // Verify the state was updated\n      console.log('AuthContext: Verifying state update:', {\n        userSet: !!user,\n        authSet: true\n      });\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('AuthContext: Login error details:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n\n      // Handle different error types\n      let errorMessage = 'An unexpected error occurred';\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        errorMessage = error.response.data.message || 'Server error';\n      } else if (error.request) {\n        // The request was made but no response was received\n        errorMessage = 'No response from server';\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const {\n        token,\n        user\n      } = await authAPI.register(userData);\n      setUser(user);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Registration failed';\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    authAPI.logout();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuthStatus","token","localStorage","getItem","savedUser","JSON","parse","currentUser","getCurrentUser","error","logout","console","login","credentials","log","email","password","response","userSet","authSet","success","_error$response","_error$response2","message","data","status","errorMessage","request","register","userData","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/paras/OneDrive/Desktop/Excel-Sheet-Analyzer/Excel-Visualizer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = async () => {\r\n    try {\r\n      const token = localStorage.getItem('authToken');\r\n      const savedUser = localStorage.getItem('user');\r\n\r\n      if (token && savedUser) {\r\n        setUser(JSON.parse(savedUser));\r\n        setIsAuthenticated(true);\r\n        \r\n        // Verify token is still valid\r\n        try {\r\n          const currentUser = await authAPI.getCurrentUser();\r\n          setUser(currentUser);\r\n        } catch (error) {\r\n          // Token is invalid, clear auth\r\n          logout();\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      console.log('AuthContext: Starting login with:', { email: credentials.email });\r\n      setLoading(true);\r\n      \r\n      // Validate input\r\n      if (!credentials.email || !credentials.password) {\r\n        throw new Error('Email and password are required');\r\n      }\r\n\r\n      // Attempt login\r\n      const response = await authAPI.login(credentials);\r\n      console.log('AuthContext: Raw API response:', response);\r\n      \r\n      const { token, user } = response;\r\n      if (!token || !user) {\r\n        console.error('AuthContext: Invalid response format:', response);\r\n        throw new Error('Invalid server response');\r\n      }\r\n\r\n      // Store auth data\r\n      console.log('AuthContext: Setting user and auth state');\r\n      setUser(user);\r\n      setIsAuthenticated(true);\r\n      \r\n      // Verify the state was updated\r\n      console.log('AuthContext: Verifying state update:', { \r\n        userSet: !!user, \r\n        authSet: true \r\n      });\r\n      \r\n      return { success: true, user };\r\n    } catch (error) {\r\n      console.error('AuthContext: Login error details:', {\r\n        message: error.message,\r\n        response: error.response?.data,\r\n        status: error.response?.status\r\n      });\r\n      \r\n      // Handle different error types\r\n      let errorMessage = 'An unexpected error occurred';\r\n      if (error.response) {\r\n        // The request was made and the server responded with a status code\r\n        // that falls out of the range of 2xx\r\n        errorMessage = error.response.data.message || 'Server error';\r\n      } else if (error.request) {\r\n        // The request was made but no response was received\r\n        errorMessage = 'No response from server';\r\n      } else {\r\n        // Something happened in setting up the request that triggered an Error\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { success: false, error: errorMessage };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      const { token, user } = await authAPI.register(userData);\r\n      setUser(user);\r\n      setIsAuthenticated(true);\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Registration failed';\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    authAPI.logout();\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}